1. Чем транспортный уровень отличается от прикладного? За что он в первую очередь отвечает?
1) Прикладной уровень (Application Layer)– это самый верхний уровень в пятиуровневой модели, где работают программы, с которыми взаимодействует пользователь (браузеры, почтовые клиенты, мессенджеры и т. д.). Он отвечает за работу приложений
- Определяет, какой протокол использовать (HTTP, FTP, DNS и т. д.).
- Формирует сообщение (например, HTTP-запрос при загрузке веб-страницы).
- НЕ отвечает за доставку данных – это задача транспортного уровня.
Примеры протоколов прикладного уровня:
- HTTP (HyperText Transfer Protocol) – загрузка веб-страниц.
- FTP (File Transfer Protocol) – передача файлов.
- DNS (Domain Name System) – преобразование доменных имен в IP-адреса.
- SMTP (Simple Mail Transfer Protocol) – отправка электронной почты.
Как выглядит работа прикладного уровня?
Ты открываешь браузер и вводишь google.com. Браузер использует DNS (чтобы найти IP-адрес) и HTTP (чтобы загрузить сайт).
2) Транспортный уровень (Transport Layer) - обеспечивает связь между приложениями на разных устройствах. Если прикладной уровень отвечает за работу приложений, то транспортный – за передачу данных между ними.
- Разбивает сообщения на сегменты (если они большие).
- Добавляет заголовки с информацией о портах отправителя и получателя.
- Может гарантировать доставку (TCP) или отправлять данные без гарантий (UDP).
Примеры протоколов транспортного уровня:
- TCP (Transmission Control Protocol) – надежная передача данных, с контролем ошибок и повторной отправкой.
- UDP (User Datagram Protocol) – быстрая передача без контроля доставки.
- QUIC – более быстрый и безопасный вариант TCP (используется в HTTP/3).
Как выглядит работа транспортного уровня?
Когда ты открываешь сайт, браузер использует TCP, чтобы установить соединение с сервером.
Когда ты смотришь видео в реальном времени (например, стрим), используется UDP, потому что важнее скорость, чем 100% гарантия доставки.

2. Что такое DNS-сервер? Что хранит в себе DNS-запись типа “A”?
DNS (Domain Name System – система доменных имен) – это телефонная книга Интернета.
Каждый компьютер в сети имеет IP-адрес (например, 142.250.184.206 – это один из адресов Google). Но запомнить такие числа сложно. Вместо этого мы вводим в браузер понятные доменные имена (google.com), а DNS переводит их в IP-адреса.
Как работает DNS-запрос?
Допустим, ты хочешь зайти на google.com. Что происходит?
1) Твой компьютер проверяет кеш - смотрит, нет ли IP-адреса google.com в памяти (например, ты недавно заходил на этот сайт).
Если адрес найден – DNS-запрос не нужен.
2) Запрос у локального DNS-сервера 
Если в кеше ничего нет, компьютер отправляет запрос на DNS-сервер твоего провайдера (ISP).
3) Рекурсивный поиск IP-адреса
Если провайдер не знает IP-адрес, он спрашивает у других серверов:
Корневые DNS-серверы (Root Servers) → указывают на сервер зоны .com
Сервер зоны .com → указывает на сервер Google
Сервер Google → возвращает IP-адрес 142.250.184.206
4) Ответ от DNS-сервера
Провайдер получает IP-адрес и передаёт его твоему компьютеру.
Теперь ты можешь подключиться к google.com.
5)Кеширование
Твой компьютер и провайдер временно сохраняют IP-адрес, чтобы ускорить будущие запросы.
DNS-запись типа "A" (Address Record) – это запись в DNS, которая указывает, какой IP-адрес соответствует доменному имени.
google.com → 142.250.184.206

3. Зачем нужна служба DNS? 
Раньше, в начале интернета, компьютеры взаимодействовали друг с другом по IP-адресам. Чтобы открыть сайт, нужно было ввести его IP, например: http://142.250.74.238/
Но запоминать IP-адреса неудобно: IP могут меняться, IP-адреса длинные и сложные, один сервер может обслуживать несколько сайтов.
Теперь можно просто ввести google.com, а система DNS сама найдёт его IP-адрес.
Основные задачи DNS:
1. Упрощает доступ к сайтам
Ты запоминаешь удобное имя (youtube.com), а не IP-адрес (142.250.190.46).
2. Позволяет менять IP без изменения домена
Если сайт переехал на другой сервер, IP-адрес изменится, но имя останется тем же – и пользователи не заметят разницы.
3. Позволяет распределять нагрузку
Один сайт (google.com) может иметь несколько IP-адресов, и DNS-сервер будет направлять пользователей на разные серверы, чтобы ускорить загрузку.

4. Что такое порт? Где в пакетах указаны порты? 
Порт — это логический номер, который используется для идентификации конкретного приложения или службы на устройстве.
Когда данные передаются через сеть, компьютер использует IP-адрес для нахождения устройства, а номер порта — для определения конкретного приложения на этом устройстве.
Например:
IP-адрес: 93.184.216.34 → означает конкретный сервер (например, сервер сайта).
Порт: 443 → означает, что данные передаются по HTTPS (зашифрованный веб-трафик).
Порты указываются в заголовках TCP или UDP.
Каждый TCP/UDP-заголовок содержит:
- Source Port (порт отправителя) – с какого порта отправляются данные.
- Destination Port (порт получателя) – на какой порт должны прийти данные.

5. Что такое мультиплексирование?
Мультиплексирование – это способ одновременной передачи данных между множеством приложений по одной сети.
Оно позволяет разным процессам на одном устройстве использовать один IP-адрес, но разные порты.
Как это работает:
Представь, что у тебя открыто несколько вкладок браузера и запущен онлайн-игра.
Все они используют один IP-адрес, но разные порты:
Вкладка с YouTube → порт 443 (HTTPS).
Вкладка с онлайн-чатом → порт 5222 (XMPP).
Онлайн-игра → порт 27015 (Steam).
Это возможно благодаря мультиплексированию, так как операционная система различает соединения по портам.

6. Где находятся данные с прикладного уровня в UDP или TCP сегментах?
В TCP и UDP данные с прикладного уровня идут в теле сегмента.

7. Какие услуги предоставляет UDP? Какими приложениями он используется и почему?
Услуги UDP:
- Минимальная задержка → Данные отправляются сразу, без проверки.
- Отсутствие гарантии доставки → Потерянные пакеты не пересылаются заново.
- Нет контроля за порядком пакетов → Пакеты могут прийти вразнобой.
- Меньший расход ресурсов → Нет сложных механизмов управления, как в TCP.
Какие приложения используют UDP и почему?
- DNS (53 порт) → Запросы должны быть быстрыми, потерянный запрос можно повторить.
- Видеозвонки и голосовые вызовы (VoIP, Zoom, Skype) → Лучше потерять несколько кадров, чем тормозить связь.
- Онлайн-игры (Steam, CS:GO, Fortnite) → Важно быстро передавать команды, даже если некоторые пакеты теряются.
- Стриминг видео и аудио (YouTube, Twitch, Spotify) → Небольшие потери данных не критичны, главное – скорость.
UDP используется, когда важна скорость, а не 100% надежность.

8. Зачем нужна контрольная сумма? и что это такое?
Контрольная сумма (checksum) – это числовое значение, вычисляемое на основе данных для проверки их целостности.
Зачем нужна?
- Помогает обнаруживать ошибки при передаче данных.
- Проверяет, не испорчен ли пакет при передаче через сеть.
- Если контрольная сумма не совпадает, пакет отбрасывается.
Как это работает?
1) Отправитель берет данные, вычисляет контрольную сумму и вставляет в заголовок.
2) Получатель пересчитывает контрольную сумму и сравнивает с полученной.
3) Если они совпадают, пакет считается корректным.
4) Если не совпадают, пакет отбрасывается.

9. Как происходит подтверждение доставки в TCP?
TCP использует механизм подтверждений (ACK), чтобы гарантировать, что все данные доставлены без ошибок.
Каждый отправленный TCP-сегмент имеет порядковый номер (Sequence Number).
Получатель отправляет подтверждение (ACK) с номером следующего ожидаемого байта.
Если подтверждение не получено, отправитель повторно передаёт данные.

10. Что такое Sequence number и Acknowledgment number?
Sequence Number (SEQ) – порядковый номер первого байта в сегменте
Используется, чтобы восстановить порядок байтов на принимающей стороне.
Например, если SEQ=100, это значит, что первый байт данных в этом пакете – 100-й в общем потоке.
Acknowledgment Number (ACK) – номер следующего ожидаемого байта
Получатель сообщает, что все данные до указанного номера успешно получены.
Например, ACK=200 означает, что байты до 199-го включительно получены, и он ожидает байт №200.

11. Что происходит, если пакет с данными не дошёл? А если не дошло подтверждение (ACK)? 
Отправитель не получает подтверждение (ACK).
По таймеру происходит повторная передача потерянного пакета.
TCP использует механизм повторной передачи (Retransmission Timeout, RTO).
Если ACK всё равно не приходит, TCP может уменьшить скорость передачи или разорвать соединение.

12. Что такое размер окна? 
Оконный механизм TCP (Sliding Window) – это количество данных, которые могут быть отправлены без ожидания подтверждения.
Receiver Window (RcvWindow) – размер буфера у получателя.
Sender Window – сколько данных отправитель может послать без ожидания ACK.
Как работает окно?
Клиент отправляет несколько пакетов подряд (в пределах окна).
Получатель отправляет ACK с указанием нового размера окна.
Если окно маленькое, передача идёт медленно (ждём подтверждение).
Если окно большое, передача идёт быстрее (можно отправлять больше данных без ожидания).
Пример:
Клиенту разрешено отправить 3 пакета подряд без ожидания ACK.
После получения первого пакета сервер отправляет ACK и увеличивает окно.

13. Как происходит установка соединения в TCP?
1. Клиент → Сервер: SYN (synchronize)
Клиент отправляет SYN-пакет с начальным SEQ.
2. Сервер → Клиент: SYN-ACK (synchronize + acknowledgment)
Сервер отвечает SYN-ACK, подтверждая запрос соединения.
3. Клиент → Сервер: ACK
Клиент отправляет ACK, соединение установлено.

14. Что такое MSS и MTU?
MSS (Maximum Segment Size) – максимальный размер TCP-сегмента (без заголовков).
Зависит от MTU сети.
Обычно MSS = MTU – 40 байтов (20 байтов IP-заголовка + 20 байтов TCP-заголовка).
MTU (Maximum Transmission Unit) – максимальный размер пакета на уровне IP.
В типичной сети Ethernet MTU = 1500 байтов.
Если пакет больше, он фрагментируется.
Пример:
Если MTU = 1500 байтов, то MSS = 1460 байтов (минус заголовки).

15.Как и зачем TCP обеспечивает контроль трафика? 
TCP использует контроль трафика (Flow Control и Congestion Control), чтобы:
Не перегружать сеть.
Не перегружать приёмник.
Гарантировать стабильную передачу данных.
Flow Control (Контроль потока) – управляет объёмом данных, которые может принять получатель.
Используется размер окна (Receiver Window).
Получатель сообщает отправителю, сколько данных он может принять.
Congestion Control (Контроль перегрузки) – предотвращает перегрузку сети.
Если теряются пакеты, TCP уменьшает скорость передачи.
Если потерь нет, TCP увеличивает окно.
Используется алгоритм медленного старта (Slow Start).
Пример:
TCP начинает с небольшой скорости и увеличивает её постепенно.
Если пакеты теряются, TCP замедляет отправку.
Если сеть не перегружена, TCP увеличивает размер окна.
Это важно для стабильной работы интернета!
Без контроля трафика сети могли бы перегружаться и «захлёбываться» в данных.

