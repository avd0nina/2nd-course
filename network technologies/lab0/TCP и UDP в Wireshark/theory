Устройства, которые объединяет сеть – **хосты** или **конечные устройства**
Хосты соединены с помощью линий связи и коммутаторов
Ядро – сеть коммутаторов и линий связи

Данные по сети передаются в виде пакетов
Пакет состоит из байтов исходных данных (например, это может быть часть файла, который мы загружаем) и служебных данных – заголовков (адреса отправителя и получателя, тип данных, контрольная сумма)
До достижения цели пакет проходит через цепочку коммутаторов, каждый из которых решает, в какую линию дальше передать пакет
Основной путь лежит через ядро – высокоскоростные сети провайдеров

Коммутаторы используются для ориентирования в сети
Коммутатор принимает входящие по линии связи пакеты и перенаправляет их на другую линию, по которой пакет достигает своей цели (или следующего на своём пути коммутатора)
Основные типы коммутаторов – маршрутизаторы (роутеры) и коммутаторы канального уровня (свитчи)
Свитчи работают на уровень ниже роутеров, не могут использоваться для маршрутизации в глобальной сети

Последовательность пройденных пакетом линий связи и коммутаторов называется путь (от англ. route)

Хосты получают доступ в интернет от провайдеров (или ISP, Internet Service Provider)
Провайдеры имеют свою сеть (например, университетская сеть nsunet)
Затем провайдеры соединяют свои сети
Провайдеры делятся на уровни, где на нижних находятся местные (городские, районные), а на верхних – национальные и международные
Провайдеры нижних уровня платят за доступ провайдерам верхних так же, как мы платим провайдерам нижних

Хосты часто делят на серверы (ожидает соединение, обычно он постоянно подключен к сети )и клиенты (инициирует соединение)
Один хост в разных сценариях может быть как сервером, так и клиентом

Протокол определяет формат и порядок сообщений, которыми обмениваются два или более взаимодействующих объектов, а также действия, предпринимаемые при передаче и приеме сообщений либо при возникновении других событий.
Основой интернета считаются протоколы TCP и IP. Зачастую их обозначают вместе: TCP/IP.
Основная (но не единственная) организация, утверждающая и разрабатывающая стандарты – IETF (Internet Engineering Task Force, Инженерный совет Интернета)
Стандартизующие документы называются RFC (Request for comment, рабочее предложение)

Протокол IP (Internet Protocol) отвечает за то, куда дальше передать пакет в Интернете
У устройства в сети есть свой IP-адрес в формате XXX.XXX.XXX.XXX
Такой адрес иерархичен, аналогично почтовому адресу (страна, город, улица…)
В соответствии с таблицей маршрутизации роутер направляет пакет в нужную линию связи, не имея при этом знаний обо всех адресах в принципе

Интернет использует пакетную коммутацию
Пакеты пересылаются не мгновенно, и коммутаторы используют store-and-forward передачу данных
Это значит, что для дальнейшей передачи пакета его сначала нужно целиком принять и обработать
Кстати, сами пакеты небольшие – Ethernet, например, ограничивает их размером в 1,5 КБ
Полученные пакеты хранятся в выходной очереди (она же буфер) и ждут дальнейшей отправки
В идеальной сети данные от одного хоста к другому перемещались бы мгновенно, в любом количестве и без потерь
В реальности мы сталкиваемся с задержками, проблемами пропускной способности, а также потерями и искажением пакетов

Пятиуровневый стек протоколов Интернета
Пакет тоже обрабатывается протоколами по уровням – при отправке сверху вниз, а при получении снизу вверх (стрелка повернулась)
Каждый протокол добавляет свои заголовки, дополняя пакет
1. Прикладной слой – слой приложений, выполняемых на хостах
Большая часть сетевого программирования происходит именно здесь
Этот уровень можно условно разбить ещё на несколько (например, как в модели OSI на Представления и Сеансовый)
Примеры протоколов: HTTP, FTP, DNS
Пакет на этом уровне называют сообщением (message)
2. Транспортный слой – слой, протоколы которого отвечают за доставку сообщений от одного приложения к другому – т.е. из сокета в сокет
Этот слой также может осуществлять контроль за нагрузкой сети, предоставлять гарантию доставки и целостности данных
Примеры протоколов: TCP, UDP, QUIC
Пакет транспортного уровня называется сегментом (segment)
3. Сетевой слой отвечает за доставку пакетов от одного хоста к другому
Он содержит в себе протоколы маршрутизации, согласно которым составляются пути для пакетов
Примеры: IP, ICMP (ping, вспомогательный)
Пакет сетевого уровня называется датаграммой (datagram)
4. Канальный слой отвечает за доставку пакетов от одного узла сети к другому
Некоторые протоколы канального слоя даже могут дать гарантию доставки пакета от одного узла к другому
Примеры: Ethernet, Wi-Fi
Пакет канального уровня называется кадром или фреймом (frame)
5. Физический слой отвечает за доставку «голых битов» из одного узла в другой
Здесь протоколы отвечают за представление битов сигналами в конкретной физической среде
Пример: Ethernet поддерживает витую пару, коаксиальный кабель и оптоволокно
Так как здесь речь о передаче битов, нового названия у пакета нет (как и новых заголовков)

Протоколам одного слоя необязательно знать о протоколах других слоёв – достаточно модели обслуживания следующего слоя
Например, приложение может отправить сообщение в UDP или TCP сокет, но не может быть уверено, что будет на физическом уровне (и ему это, в общем-то, неважно)
При продвижения пакета по слоям, каждый протокол добавляет ему свои заголовки – но он не обрабатывает заголовки протоколов верхних уровней и ничего не знает о заголовках нижних уровней
Это является проявлением инкапсуляции. Говорят, пакет одного уровня (фрейм, сегмент…) инкапсулирует (скрывает, включает в себя) пакет другого уровня (датаграмму, сообщение…)
Иногда из-за этого протоколы дублируют ответственность

Физический (Physical) → передаёт биты по проводам или через радио.
Канальный (Data Link) → организует передачу между соседними узлами.
Сетевой (Network) → выбирает маршрут и передаёт данные между разными сетями.
Транспортный (Transport) → управляет передачей данных между приложениями.
Прикладной (Application) → отвечает за взаимодействие пользователя с сетью.

Как это работает на примере отправки сообщения в WhatsApp?
1. Прикладной уровень (Application Layer) → Что передавать?
Ты пишешь сообщение "Привет" в WhatsApp и нажимаешь "Отправить".
WhatsApp использует протокол HTTP или WebSocket для общения с сервером.
Оно кодируется в виде данных, готовых для передачи.

2. Транспортный уровень (Transport Layer) → Как передавать?
Сообщение слишком большое для мгновенной отправки, поэтому разбивается на мелкие части (сегменты).
Если используется TCP, каждый сегмент получает номер (чтобы можно было восстановить порядок).
Если используется UDP, данные отправляются без проверки доставки (например, для голосовых сообщений).

3. Сетевой уровень (Network Layer) → Куда отправлять?
Теперь системе нужно определить, куда отправить данные.
Твой телефон узнаёт IP-адрес сервера WhatsApp (например, 192.168.1.1).
Используется протокол IP, который выбирает маршрут для передачи.

4. Канальный уровень (Data Link Layer) → Как передавать между устройствами?
Данные отправляются на следующий сетевой узел (например, на роутер).
У каждого устройства есть MAC-адрес (как номер квартиры), и данные передаются на нужный MAC-адрес.
Если используется Wi-Fi, данные кодируются в радиосигналы.

5. Физический уровень (Physical Layer) → Передача битов
Сообщение "Привет" теперь представлено как 0 и 1.
Эти биты передаются через электрические сигналы (в кабелях) или радиоволны (в Wi-Fi).
Когда данные доходят до сервера WhatsApp, они проходят этот же путь, но в обратном порядке!

TCP и UDP – это транспортные протоколы, которые работают на транспортном уровне (второй сверху в пятиуровневой модели). Они отвечают за передачу данных между программами, работающими на разных компьютерах.

Пример из жизни:
- TCP – как отправка посылки с трек-номером: отправитель и получатель подтверждают доставку каждого элемента.
- UDP – как крик в толпе: ты просто говоришь, но не знаешь, услышал ли кто-то.

1. TCP (Transmission Control Protocol) – Надёжный протокол
TCP используется там, где важна точность и гарантия доставки данных.
Как работает TCP?
Перед началом передачи устанавливается соединение (трёхэтапное рукопожатие – SYN, SYN-ACK, ACK).
Каждый отправленный кусочек данных (сегмент) получает номер (Sequence Number).
Приёмник подтверждает получение данных (ACK - Acknowledgment Number) - номер следующего ожидаемого байта.
Если пакет потеряется, TCP отправит его заново.
Контролирует скорость передачи (если сеть загружена, TCP отправляет меньше пакетов).
Закрывает соединение, когда передача завершена.

Где используется TCP?
- Веб-сайты (HTTP, HTTPS)
- Электронная почта (SMTP, IMAP, POP3)
- Передача файлов (FTP)
- Чаты (WhatsApp, Telegram)

Плюсы TCP:
Надёжность – гарантированная доставка данных
Очерёдность – пакеты приходят в правильном порядке
Контроль ошибок – если что-то потерялось, будет повторная отправка

Минусы TCP:
Медленный – много проверок и подтверждений
Задержки – если сеть перегружена, TCP замедляется

2. UDP (User Datagram Protocol) – Быстрый, но ненадёжный протокол

UDP используется там, где важна скорость, а потеря некоторых данных не критична.

Как работает UDP?
Данные просто отправляются без подтверждения.
Нет установки соединения, нет номеров пакетов.
Если пакет потерялся – он не будет отправлен заново.

Где используется UDP?
- Видеозвонки и голосовые звонки (Zoom, Skype, Discord)
- Онлайн-игры (CS:GO, Fortnite, Dota 2)
- Стриминг видео и аудио (YouTube, Netflix, Spotify)
- DNS-запросы (nslookup, ping)

Плюсы UDP:
Быстрота – нет задержек на подтверждения
Меньше нагрузка на сеть

Минусы UDP:
Данные могут потеряться
Пакеты могут прийти в неправильном порядке

Сетевой интерфейс — это физическое или виртуальное устройство, которое используется для передачи и получения данных в сети. 
- Wi-Fi: en0 - основной беспроводной интерфейс
- awdl0 - интерфейс для Apple Wireless Direct Link (AWDL). AWDL используется для передачи данных между устройствами Apple (например, для AirDrop или других сервисов). 
- utun8 - это виртуальный интерфейс, который используется для VPN-соединений.
- Loopback: lo0 - этот интерфейс представляет собой локальный интерфейс (loopback), который используется для связи внутри самой операционной системы.
- ap1 - это интерфейс, который может быть связан с точкой доступа (Access Point) или какой-то виртуальной сетью.

Захват сетевого трафика — это процесс перехвата, записи и анализа данных, которые передаются через компьютерную сеть.
- Перехват пакетов: сетевой трафик состоит из пакетов, которые содержат информацию о том, какие данные передаются между устройствами (например, твой компьютер и сервер, на котором размещен сайт). Захват трафика позволяет перехватить эти пакеты.
- Анализ пакетов: после захвата трафика можно проанализировать содержание этих пакетов. Например, узнать, какой сайт ты посещаешь, какие данные отправляешь, какие протоколы используются (HTTP, HTTPS, FTP и т. д.), а также посмотреть заголовки и другие метаданные.
Предположим, ты открываешь веб-страницу на своем компьютере. В процессе этого:
- Компьютер отправляет запрос на сервер, чтобы получить данные о странице.
- Сервер отвечает, отправив данные страницы обратно на твой компьютер.
- Если ты проводишь захват трафика, ты сможешь увидеть этот запрос и ответ:
Почему и когда полезен захват трафика?
- Диагностика сети: Если что-то не работает в сети, захват трафика помогает понять, что именно идет не так — например, потеря пакетов или неправильный формат данных.
- Безопасность: Можно анализировать трафик на наличие вредоносных действий, таких как атаки или несанкционированный доступ к данным.
- Оптимизация производительности: Захват трафика помогает выявить проблемы с производительностью, например, медленную загрузку страниц или перегрузку сети.
